// –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è DuckDB WASM —á–µ—Ä–µ–∑ esm.sh
class DuckDBWASMLoader {
    constructor() {
        this.db = null;
        this.initialized = false;
    }

    async initialize() {
        try {
            console.log('üîß Loading DuckDB WASM from ESM CDN...');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º esm.sh –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            const duckdb = await import('https://esm.sh/@duckdb/duckdb-wasm@1.29.0');
            
            console.log('üì¶ DuckDB module loaded, initializing...');
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –±–∞–Ω–¥–ª—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            const MANUAL_BUNDLES = {
                eh: {
                    mainModule: '/javascript/duckdb/duckdb-eh.wasm',
                    mainWorker: '/javascript/duckdb/duckdb-browser-eh.worker.js',
                    pthreadWorker: null
                }
            };
            
            const bundle = MANUAL_BUNDLES.eh;
            
            const worker = new Worker(bundle.mainWorker);
            const logger = new duckdb.ConsoleLogger();
            
            this.db = new duckdb.AsyncDuckDB(logger, worker);
            await this.db.instantiate(bundle.mainModule);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            this.connection = await this.db.connect();
            
            console.log('‚úÖ DuckDB WASM initialized successfully with local files!');
            this.initialized = true;
            
            return this.db;
            
        } catch (error) {
            console.error('‚ùå Failed to initialize DuckDB WASM:', error);
            
            // –ü—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            try {
                console.log('üîÑ Trying simplified DuckDB initialization...');
                
                const duckdb = await import('https://cdn.skypack.dev/@duckdb/duckdb-wasm');
                
                // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                this.db = await duckdb.default.DuckDBDataProtocol.initialize();
                this.initialized = true;
                
                console.log('‚úÖ DuckDB WASM initialized (simplified mode)');
                return this.db;
                
            } catch (fallbackError) {
                console.error('‚ùå Simplified initialization also failed:', fallbackError);
                throw new Error('All DuckDB initialization methods failed');
            }
        }
    }

    async query(sql) {
        if (!this.initialized || !this.connection) {
            throw new Error('DuckDB not initialized or no connection available');
        }
        
        try {
            console.log('üîç Executing query:', sql);
            const result = await this.connection.query(sql);
            return result;
        } catch (error) {
            console.error('‚ùå Query failed:', error);
            throw error;
        }
    }

    async close() {
        if (this.connection) {
            await this.connection.close();
            this.connection = null;
        }
        if (this.db) {
            await this.db.close();
            this.db = null;
        }
        this.initialized = false;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.DuckDBWASMLoader = DuckDBWASMLoader;

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.duckdbLoader = new DuckDBWASMLoader();

console.log('‚úÖ DuckDB WASM loader ready');
